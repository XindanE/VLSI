$date
  Thu Jan 19 01:33:44 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! dec2exe_empty $end
$var reg 1 " exe_pop $end
$var reg 32 # dec_op1[31:0] $end
$var reg 32 $ dec_op2[31:0] $end
$var reg 4 % dec_exe_dest[3:0] $end
$var reg 1 & dec_exe_wb $end
$var reg 1 ' dec_flag_wb $end
$var reg 32 ( dec_mem_data[31:0] $end
$var reg 4 ) dec_mem_dest[3:0] $end
$var reg 1 * dec_pre_index $end
$var reg 1 + dec_mem_lw $end
$var reg 1 , dec_mem_lb $end
$var reg 1 - dec_mem_sw $end
$var reg 1 . dec_mem_sb $end
$var reg 1 / dec_shift_lsl $end
$var reg 1 0 dec_shift_lsr $end
$var reg 1 1 dec_shift_asr $end
$var reg 1 2 dec_shift_ror $end
$var reg 1 3 dec_shift_rrx $end
$var reg 5 4 dec_shift_val[4:0] $end
$var reg 1 5 dec_cy $end
$var reg 1 6 dec_comp_op1 $end
$var reg 1 7 dec_comp_op2 $end
$var reg 1 8 dec_alu_cy $end
$var reg 2 9 dec_alu_cmd[1:0] $end
$var reg 32 : exe_res[31:0] $end
$var reg 1 ; exe_c $end
$var reg 1 < exe_v $end
$var reg 1 = exe_n $end
$var reg 1 > exe_z $end
$var reg 4 ? exe_dest[3:0] $end
$var reg 1 @ exe_wb $end
$var reg 1 A exe_flag_wb $end
$var reg 32 B exe_mem_adr[31:0] $end
$var reg 32 C exe_mem_data[31:0] $end
$var reg 4 D exe_mem_dest[3:0] $end
$var reg 1 E exe_mem_lw $end
$var reg 1 F exe_mem_lb $end
$var reg 1 G exe_mem_sw $end
$var reg 1 H exe_mem_sb $end
$var reg 1 I exe2mem_empty $end
$var reg 1 J mem_pop $end
$var reg 1 K ck $end
$var reg 1 L reset_n $end
$var reg 1 M vdd $end
$var reg 1 N vss $end
$scope module test $end
$var reg 1 O dec2exe_empty $end
$var reg 1 P exe_pop $end
$var reg 32 Q dec_op1[31:0] $end
$var reg 32 R dec_op2[31:0] $end
$var reg 4 S dec_exe_dest[3:0] $end
$var reg 1 T dec_exe_wb $end
$var reg 1 U dec_flag_wb $end
$var reg 32 V dec_mem_data[31:0] $end
$var reg 4 W dec_mem_dest[3:0] $end
$var reg 1 X dec_pre_index $end
$var reg 1 Y dec_mem_lw $end
$var reg 1 Z dec_mem_lb $end
$var reg 1 [ dec_mem_sw $end
$var reg 1 \ dec_mem_sb $end
$var reg 1 ] dec_shift_lsl $end
$var reg 1 ^ dec_shift_lsr $end
$var reg 1 _ dec_shift_asr $end
$var reg 1 ` dec_shift_ror $end
$var reg 1 a dec_shift_rrx $end
$var reg 5 b dec_shift_val[4:0] $end
$var reg 1 c dec_cy $end
$var reg 1 d dec_comp_op1 $end
$var reg 1 e dec_comp_op2 $end
$var reg 1 f dec_alu_cy $end
$var reg 2 g dec_alu_cmd[1:0] $end
$var reg 32 h exe_res[31:0] $end
$var reg 1 i exe_c $end
$var reg 1 j exe_v $end
$var reg 1 k exe_n $end
$var reg 1 l exe_z $end
$var reg 4 m exe_dest[3:0] $end
$var reg 1 n exe_wb $end
$var reg 1 o exe_flag_wb $end
$var reg 32 p exe_mem_adr[31:0] $end
$var reg 32 q exe_mem_data[31:0] $end
$var reg 4 r exe_mem_dest[3:0] $end
$var reg 1 s exe_mem_lw $end
$var reg 1 t exe_mem_lb $end
$var reg 1 u exe_mem_sw $end
$var reg 1 v exe_mem_sb $end
$var reg 1 w exe2mem_empty $end
$var reg 1 x mem_pop $end
$var reg 1 y ck $end
$var reg 1 z reset_n $end
$var reg 1 { vdd $end
$var reg 1 | vss $end
$var reg 1 } shift_c $end
$var reg 1 !" alu_c $end
$var reg 32 "" op2[31:0] $end
$var reg 32 #" op2_shift[31:0] $end
$var reg 32 $" op1[31:0] $end
$var reg 32 %" alu_res[31:0] $end
$var reg 32 &" res_reg[31:0] $end
$var reg 32 '" mem_adr[31:0] $end
$var reg 1 (" exe_push $end
$var reg 1 )" exe2mem_full $end
$var reg 1 *" mem_acces $end
$scope module shifter_inst $end
$var reg 1 +" shift_lsl $end
$var reg 1 ," shift_lsr $end
$var reg 1 -" shift_asr $end
$var reg 1 ." shift_ror $end
$var reg 1 /" shift_rrx $end
$var reg 5 0" shift_val[4:0] $end
$var reg 32 1" din[31:0] $end
$var reg 1 2" cin $end
$var reg 32 3" dout[31:0] $end
$var reg 1 4" cout $end
$var reg 1 5" vdd $end
$var reg 1 6" vss $end
$var reg 1 7" cout_left $end
$var reg 1 8" cout_right $end
$var reg 32 9" dout_inter0[31:0] $end
$var reg 32 :" dout_inter1[31:0] $end
$var reg 32 ;" dout_inter2[31:0] $end
$var reg 32 <" dout_inter3[31:0] $end
$upscope $end
$scope module alu_inst $end
$var reg 32 =" op1[31:0] $end
$var reg 32 >" op2[31:0] $end
$var reg 1 ?" cin $end
$var reg 2 @" cmd[1:0] $end
$var reg 32 A" res[31:0] $end
$var reg 1 B" cout $end
$var reg 1 C" z $end
$var reg 1 D" n $end
$var reg 1 E" v $end
$var reg 1 F" vdd $end
$var reg 1 G" vss $end
$var reg 32 H" res_signal[31:0] $end
$var reg 32 I" add_sum[31:0] $end
$var reg 1 J" add_cout $end
$scope module add32 $end
$var reg 32 K" a[31:0] $end
$var reg 32 L" b[31:0] $end
$var reg 1 M" cin $end
$var reg 1 N" c $end
$var reg 32 O" s[31:0] $end
$var reg 1 P" c_signal $end
$scope module part_0 $end
$var reg 16 Q" a[15:0] $end
$var reg 16 R" b[15:0] $end
$var reg 1 S" cin $end
$var reg 1 T" c $end
$var reg 16 U" s[15:0] $end
$var reg 3 V" c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 W" a[3:0] $end
$var reg 4 X" b[3:0] $end
$var reg 1 Y" cin $end
$var reg 1 Z" c $end
$var reg 4 [" s[3:0] $end
$var reg 3 \" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 ]" a $end
$var reg 1 ^" b $end
$var reg 1 _" cin $end
$var reg 1 `" c $end
$var reg 1 a" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 b" a $end
$var reg 1 c" b $end
$var reg 1 d" cin $end
$var reg 1 e" c $end
$var reg 1 f" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 g" a $end
$var reg 1 h" b $end
$var reg 1 i" cin $end
$var reg 1 j" c $end
$var reg 1 k" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 l" a $end
$var reg 1 m" b $end
$var reg 1 n" cin $end
$var reg 1 o" c $end
$var reg 1 p" s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 q" a[3:0] $end
$var reg 4 r" b[3:0] $end
$var reg 1 s" cin $end
$var reg 1 t" c $end
$var reg 4 u" s[3:0] $end
$var reg 3 v" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 w" a $end
$var reg 1 x" b $end
$var reg 1 y" cin $end
$var reg 1 z" c $end
$var reg 1 {" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 |" a $end
$var reg 1 }" b $end
$var reg 1 !# cin $end
$var reg 1 "# c $end
$var reg 1 ## s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 $# a $end
$var reg 1 %# b $end
$var reg 1 &# cin $end
$var reg 1 '# c $end
$var reg 1 (# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 )# a $end
$var reg 1 *# b $end
$var reg 1 +# cin $end
$var reg 1 ,# c $end
$var reg 1 -# s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 .# a[3:0] $end
$var reg 4 /# b[3:0] $end
$var reg 1 0# cin $end
$var reg 1 1# c $end
$var reg 4 2# s[3:0] $end
$var reg 3 3# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 4# a $end
$var reg 1 5# b $end
$var reg 1 6# cin $end
$var reg 1 7# c $end
$var reg 1 8# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 9# a $end
$var reg 1 :# b $end
$var reg 1 ;# cin $end
$var reg 1 <# c $end
$var reg 1 =# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 ># a $end
$var reg 1 ?# b $end
$var reg 1 @# cin $end
$var reg 1 A# c $end
$var reg 1 B# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 C# a $end
$var reg 1 D# b $end
$var reg 1 E# cin $end
$var reg 1 F# c $end
$var reg 1 G# s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 H# a[3:0] $end
$var reg 4 I# b[3:0] $end
$var reg 1 J# cin $end
$var reg 1 K# c $end
$var reg 4 L# s[3:0] $end
$var reg 3 M# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 N# a $end
$var reg 1 O# b $end
$var reg 1 P# cin $end
$var reg 1 Q# c $end
$var reg 1 R# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 S# a $end
$var reg 1 T# b $end
$var reg 1 U# cin $end
$var reg 1 V# c $end
$var reg 1 W# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 X# a $end
$var reg 1 Y# b $end
$var reg 1 Z# cin $end
$var reg 1 [# c $end
$var reg 1 \# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 ]# a $end
$var reg 1 ^# b $end
$var reg 1 _# cin $end
$var reg 1 `# c $end
$var reg 1 a# s $end
$upscope $end
$upscope $end
$upscope $end
$scope module part_1 $end
$var reg 16 b# a[15:0] $end
$var reg 16 c# b[15:0] $end
$var reg 1 d# cin $end
$var reg 1 e# c $end
$var reg 16 f# s[15:0] $end
$var reg 3 g# c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 h# a[3:0] $end
$var reg 4 i# b[3:0] $end
$var reg 1 j# cin $end
$var reg 1 k# c $end
$var reg 4 l# s[3:0] $end
$var reg 3 m# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 n# a $end
$var reg 1 o# b $end
$var reg 1 p# cin $end
$var reg 1 q# c $end
$var reg 1 r# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 s# a $end
$var reg 1 t# b $end
$var reg 1 u# cin $end
$var reg 1 v# c $end
$var reg 1 w# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 x# a $end
$var reg 1 y# b $end
$var reg 1 z# cin $end
$var reg 1 {# c $end
$var reg 1 |# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 }# a $end
$var reg 1 !$ b $end
$var reg 1 "$ cin $end
$var reg 1 #$ c $end
$var reg 1 $$ s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 %$ a[3:0] $end
$var reg 4 &$ b[3:0] $end
$var reg 1 '$ cin $end
$var reg 1 ($ c $end
$var reg 4 )$ s[3:0] $end
$var reg 3 *$ c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 +$ a $end
$var reg 1 ,$ b $end
$var reg 1 -$ cin $end
$var reg 1 .$ c $end
$var reg 1 /$ s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 0$ a $end
$var reg 1 1$ b $end
$var reg 1 2$ cin $end
$var reg 1 3$ c $end
$var reg 1 4$ s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 5$ a $end
$var reg 1 6$ b $end
$var reg 1 7$ cin $end
$var reg 1 8$ c $end
$var reg 1 9$ s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 :$ a $end
$var reg 1 ;$ b $end
$var reg 1 <$ cin $end
$var reg 1 =$ c $end
$var reg 1 >$ s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 ?$ a[3:0] $end
$var reg 4 @$ b[3:0] $end
$var reg 1 A$ cin $end
$var reg 1 B$ c $end
$var reg 4 C$ s[3:0] $end
$var reg 3 D$ c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 E$ a $end
$var reg 1 F$ b $end
$var reg 1 G$ cin $end
$var reg 1 H$ c $end
$var reg 1 I$ s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 J$ a $end
$var reg 1 K$ b $end
$var reg 1 L$ cin $end
$var reg 1 M$ c $end
$var reg 1 N$ s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 O$ a $end
$var reg 1 P$ b $end
$var reg 1 Q$ cin $end
$var reg 1 R$ c $end
$var reg 1 S$ s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 T$ a $end
$var reg 1 U$ b $end
$var reg 1 V$ cin $end
$var reg 1 W$ c $end
$var reg 1 X$ s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 Y$ a[3:0] $end
$var reg 4 Z$ b[3:0] $end
$var reg 1 [$ cin $end
$var reg 1 \$ c $end
$var reg 4 ]$ s[3:0] $end
$var reg 3 ^$ c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 _$ a $end
$var reg 1 `$ b $end
$var reg 1 a$ cin $end
$var reg 1 b$ c $end
$var reg 1 c$ s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 d$ a $end
$var reg 1 e$ b $end
$var reg 1 f$ cin $end
$var reg 1 g$ c $end
$var reg 1 h$ s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 i$ a $end
$var reg 1 j$ b $end
$var reg 1 k$ cin $end
$var reg 1 l$ c $end
$var reg 1 m$ s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 n$ a $end
$var reg 1 o$ b $end
$var reg 1 p$ cin $end
$var reg 1 q$ c $end
$var reg 1 r$ s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module exec2mem $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
1"
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b0000 %
0&
0'
b00000000000000000000000000000000 (
b0000 )
0*
0+
0,
0-
0.
0/
00
01
02
03
b00000 4
05
06
07
08
b00 9
b00000000000000000000000000000000 :
0;
0<
0=
1>
b0000 ?
0@
0A
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU B
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU C
bUUUU D
UE
UF
UG
UH
UI
0J
0K
0L
0M
0N
0O
1P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b0000 S
0T
0U
b00000000000000000000000000000000 V
b0000 W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
b00000 b
0c
0d
0e
0f
b00 g
b00000000000000000000000000000000 h
0i
0j
0k
1l
b0000 m
0n
0o
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU p
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU q
bUUUU r
Us
Ut
Uu
Uv
Uw
0x
0y
0z
0{
0|
0}
0!"
b00000000000000000000000000000000 ""
b00000000000000000000000000000000 #"
b00000000000000000000000000000000 $"
b00000000000000000000000000000000 %"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU &"
b00000000000000000000000000000000 '"
0("
U)"
0*"
0+"
0,"
0-"
0."
0/"
b00000 0"
b00000000000000000000000000000000 1"
02"
b00000000000000000000000000000000 3"
04"
05"
06"
07"
08"
b00000000000000000000000000000000 9"
b00000000000000000000000000000000 :"
b00000000000000000000000000000000 ;"
b00000000000000000000000000000000 <"
b00000000000000000000000000000000 ="
b00000000000000000000000000000000 >"
0?"
b00 @"
b00000000000000000000000000000000 A"
0B"
1C"
0D"
0E"
0F"
0G"
b00000000000000000000000000000000 H"
b00000000000000000000000000000000 I"
0J"
b00000000000000000000000000000000 K"
b00000000000000000000000000000000 L"
0M"
0N"
b00000000000000000000000000000000 O"
0P"
b0000000000000000 Q"
b0000000000000000 R"
0S"
0T"
b0000000000000000 U"
b000 V"
b0000 W"
b0000 X"
0Y"
0Z"
b0000 ["
b000 \"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
b0000 q"
b0000 r"
0s"
0t"
b0000 u"
b000 v"
0w"
0x"
0y"
0z"
0{"
0|"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
b0000 .#
b0000 /#
00#
01#
b0000 2#
b000 3#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
b0000 H#
b0000 I#
0J#
0K#
b0000 L#
b000 M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0]#
0^#
0_#
0`#
0a#
b0000000000000000 b#
b0000000000000000 c#
0d#
0e#
b0000000000000000 f#
b000 g#
b0000 h#
b0000 i#
0j#
0k#
b0000 l#
b000 m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0}#
0!$
0"$
0#$
0$$
b0000 %$
b0000 &$
0'$
0($
b0000 )$
b000 *$
0+$
0,$
0-$
0.$
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
b0000 ?$
b0000 @$
0A$
0B$
b0000 C$
b000 D$
0E$
0F$
0G$
0H$
0I$
0J$
0K$
0L$
0M$
0N$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
b0000 Y$
b0000 Z$
0[$
0\$
b0000 ]$
b000 ^$
0_$
0`$
0a$
0b$
0c$
0d$
0e$
0f$
0g$
0h$
0i$
0j$
0k$
0l$
0m$
0n$
0o$
0p$
0q$
0r$
#20000000
b00000001000000100000001100000001 #
b00000000000000000000000000000001 $
b00000001000000100000001100000010 :
0>
b00000001000000100000001100000001 Q
b00000000000000000000000000000001 R
b00000001000000100000001100000010 h
0l
b00000000000000000000000000000001 ""
b00000000000000000000000000000001 #"
b00000001000000100000001100000001 $"
b00000001000000100000001100000010 %"
b00000001000000100000001100000010 '"
b00000000000000000000000000000001 1"
b00000000000000000000000000000001 3"
b00000000000000000000000000000001 9"
b00000000000000000000000000000001 :"
b00000000000000000000000000000001 ;"
b00000000000000000000000000000001 <"
b00000001000000100000001100000001 ="
b00000000000000000000000000000001 >"
b00000001000000100000001100000010 A"
0C"
b00000001000000100000001100000000 H"
b00000001000000100000001100000010 I"
b00000001000000100000001100000001 K"
b00000000000000000000000000000001 L"
b00000001000000100000001100000010 O"
b0000001100000001 Q"
b0000000000000001 R"
b0000001100000010 U"
b0001 W"
b0001 X"
b0010 ["
b001 \"
1]"
1^"
1`"
0a"
1d"
1f"
b0011 .#
b0011 2#
14#
18#
19#
1=#
b0000000100000010 b#
b0000000100000010 f#
b0010 h#
b0010 l#
1s#
1w#
b0001 ?$
b0001 C$
1E$
1I$
#40000000
b00010 4
b00010 b
b00010 0"
#50000000
10
b00000001000000100000001100000001 :
1^
b00000001000000100000001100000001 h
b00000000000000000000000000000000 ""
b00000000000000000000000000000000 #"
b00000001000000100000001100000001 %"
b00000001000000100000001100000001 '"
1,"
b00000000000000000000000000000000 3"
b00000000000000000000000000000000 :"
b00000000000000000000000000000000 ;"
b00000000000000000000000000000000 <"
b00000000000000000000000000000000 >"
b00000001000000100000001100000001 A"
b00000001000000100000001100000001 H"
b00000001000000100000001100000001 I"
b00000000000000000000000000000000 L"
b00000001000000100000001100000001 O"
b0000000000000000 R"
b0000001100000001 U"
b0000 X"
b0001 ["
b000 \"
0^"
0`"
1a"
0d"
0f"
