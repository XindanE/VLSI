$date
  Wed Jan 18 02:55:36 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! cin_signal $end
$var reg 1 " cout $end
$var reg 32 # s[31:0] $end
$var reg 32 $ a[31:0] $end
$var reg 32 % b[31:0] $end
$scope module test $end
$var reg 32 & a[31:0] $end
$var reg 32 ' b[31:0] $end
$var reg 1 ( cin $end
$var reg 1 ) c $end
$var reg 32 * s[31:0] $end
$var reg 1 + c_signal $end
$scope module part_0 $end
$var reg 16 , a[15:0] $end
$var reg 16 - b[15:0] $end
$var reg 1 . cin $end
$var reg 1 / c $end
$var reg 16 0 s[15:0] $end
$var reg 3 1 c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 2 a[3:0] $end
$var reg 4 3 b[3:0] $end
$var reg 1 4 cin $end
$var reg 1 5 c $end
$var reg 4 6 s[3:0] $end
$var reg 3 7 c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 8 a $end
$var reg 1 9 b $end
$var reg 1 : cin $end
$var reg 1 ; c $end
$var reg 1 < s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 = a $end
$var reg 1 > b $end
$var reg 1 ? cin $end
$var reg 1 @ c $end
$var reg 1 A s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 B a $end
$var reg 1 C b $end
$var reg 1 D cin $end
$var reg 1 E c $end
$var reg 1 F s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 G a $end
$var reg 1 H b $end
$var reg 1 I cin $end
$var reg 1 J c $end
$var reg 1 K s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 L a[3:0] $end
$var reg 4 M b[3:0] $end
$var reg 1 N cin $end
$var reg 1 O c $end
$var reg 4 P s[3:0] $end
$var reg 3 Q c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 R a $end
$var reg 1 S b $end
$var reg 1 T cin $end
$var reg 1 U c $end
$var reg 1 V s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 W a $end
$var reg 1 X b $end
$var reg 1 Y cin $end
$var reg 1 Z c $end
$var reg 1 [ s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 \ a $end
$var reg 1 ] b $end
$var reg 1 ^ cin $end
$var reg 1 _ c $end
$var reg 1 ` s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c cin $end
$var reg 1 d c $end
$var reg 1 e s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 f a[3:0] $end
$var reg 4 g b[3:0] $end
$var reg 1 h cin $end
$var reg 1 i c $end
$var reg 4 j s[3:0] $end
$var reg 3 k c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 l a $end
$var reg 1 m b $end
$var reg 1 n cin $end
$var reg 1 o c $end
$var reg 1 p s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 q a $end
$var reg 1 r b $end
$var reg 1 s cin $end
$var reg 1 t c $end
$var reg 1 u s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 v a $end
$var reg 1 w b $end
$var reg 1 x cin $end
$var reg 1 y c $end
$var reg 1 z s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 { a $end
$var reg 1 | b $end
$var reg 1 } cin $end
$var reg 1 !" c $end
$var reg 1 "" s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 #" a[3:0] $end
$var reg 4 $" b[3:0] $end
$var reg 1 %" cin $end
$var reg 1 &" c $end
$var reg 4 '" s[3:0] $end
$var reg 3 (" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 )" a $end
$var reg 1 *" b $end
$var reg 1 +" cin $end
$var reg 1 ," c $end
$var reg 1 -" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 ." a $end
$var reg 1 /" b $end
$var reg 1 0" cin $end
$var reg 1 1" c $end
$var reg 1 2" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 3" a $end
$var reg 1 4" b $end
$var reg 1 5" cin $end
$var reg 1 6" c $end
$var reg 1 7" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 8" a $end
$var reg 1 9" b $end
$var reg 1 :" cin $end
$var reg 1 ;" c $end
$var reg 1 <" s $end
$upscope $end
$upscope $end
$upscope $end
$scope module part_1 $end
$var reg 16 =" a[15:0] $end
$var reg 16 >" b[15:0] $end
$var reg 1 ?" cin $end
$var reg 1 @" c $end
$var reg 16 A" s[15:0] $end
$var reg 3 B" c_signal[2:0] $end
$scope module hw_0 $end
$var reg 4 C" a[3:0] $end
$var reg 4 D" b[3:0] $end
$var reg 1 E" cin $end
$var reg 1 F" c $end
$var reg 4 G" s[3:0] $end
$var reg 3 H" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 I" a $end
$var reg 1 J" b $end
$var reg 1 K" cin $end
$var reg 1 L" c $end
$var reg 1 M" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 N" a $end
$var reg 1 O" b $end
$var reg 1 P" cin $end
$var reg 1 Q" c $end
$var reg 1 R" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 S" a $end
$var reg 1 T" b $end
$var reg 1 U" cin $end
$var reg 1 V" c $end
$var reg 1 W" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 X" a $end
$var reg 1 Y" b $end
$var reg 1 Z" cin $end
$var reg 1 [" c $end
$var reg 1 \" s $end
$upscope $end
$upscope $end
$scope module hw_1 $end
$var reg 4 ]" a[3:0] $end
$var reg 4 ^" b[3:0] $end
$var reg 1 _" cin $end
$var reg 1 `" c $end
$var reg 4 a" s[3:0] $end
$var reg 3 b" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 c" a $end
$var reg 1 d" b $end
$var reg 1 e" cin $end
$var reg 1 f" c $end
$var reg 1 g" s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 h" a $end
$var reg 1 i" b $end
$var reg 1 j" cin $end
$var reg 1 k" c $end
$var reg 1 l" s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 m" a $end
$var reg 1 n" b $end
$var reg 1 o" cin $end
$var reg 1 p" c $end
$var reg 1 q" s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 r" a $end
$var reg 1 s" b $end
$var reg 1 t" cin $end
$var reg 1 u" c $end
$var reg 1 v" s $end
$upscope $end
$upscope $end
$scope module hw_2 $end
$var reg 4 w" a[3:0] $end
$var reg 4 x" b[3:0] $end
$var reg 1 y" cin $end
$var reg 1 z" c $end
$var reg 4 {" s[3:0] $end
$var reg 3 |" c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 }" a $end
$var reg 1 !# b $end
$var reg 1 "# cin $end
$var reg 1 ## c $end
$var reg 1 $# s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 %# a $end
$var reg 1 &# b $end
$var reg 1 '# cin $end
$var reg 1 (# c $end
$var reg 1 )# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 *# a $end
$var reg 1 +# b $end
$var reg 1 ,# cin $end
$var reg 1 -# c $end
$var reg 1 .# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 /# a $end
$var reg 1 0# b $end
$var reg 1 1# cin $end
$var reg 1 2# c $end
$var reg 1 3# s $end
$upscope $end
$upscope $end
$scope module hw_3 $end
$var reg 4 4# a[3:0] $end
$var reg 4 5# b[3:0] $end
$var reg 1 6# cin $end
$var reg 1 7# c $end
$var reg 4 8# s[3:0] $end
$var reg 3 9# c_signal[2:0] $end
$scope module bit_0 $end
$var reg 1 :# a $end
$var reg 1 ;# b $end
$var reg 1 <# cin $end
$var reg 1 =# c $end
$var reg 1 ># s $end
$upscope $end
$scope module bit_1 $end
$var reg 1 ?# a $end
$var reg 1 @# b $end
$var reg 1 A# cin $end
$var reg 1 B# c $end
$var reg 1 C# s $end
$upscope $end
$scope module bit_2 $end
$var reg 1 D# a $end
$var reg 1 E# b $end
$var reg 1 F# cin $end
$var reg 1 G# c $end
$var reg 1 H# s $end
$upscope $end
$scope module bit_3 $end
$var reg 1 I# a $end
$var reg 1 J# b $end
$var reg 1 K# cin $end
$var reg 1 L# c $end
$var reg 1 M# s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
1!
0"
b00000000000000000000000000000001 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
1(
0)
b00000000000000000000000000000001 *
0+
b0000000000000000 ,
b0000000000000000 -
1.
0/
b0000000000000001 0
b000 1
b0000 2
b0000 3
14
05
b0001 6
b000 7
08
09
1:
0;
1<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
b0000 L
b0000 M
0N
0O
b0000 P
b000 Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
b0000 f
b0000 g
0h
0i
b0000 j
b000 k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0!"
0""
b0000 #"
b0000 $"
0%"
0&"
b0000 '"
b000 ("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
b0000000000000000 ="
b0000000000000000 >"
0?"
0@"
b0000000000000000 A"
b000 B"
b0000 C"
b0000 D"
0E"
0F"
b0000 G"
b000 H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
b0000 ]"
b0000 ^"
0_"
0`"
b0000 a"
b000 b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
b0000 w"
b0000 x"
0y"
0z"
b0000 {"
b000 |"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
0.#
0/#
00#
01#
02#
03#
b0000 4#
b0000 5#
06#
07#
b0000 8#
b000 9#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0M#
#20000000
1"
b00000000000000000000000000000011 #
b10000000000000000000000000000001 $
b10000000000000000000000000000001 %
b10000000000000000000000000000001 &
b10000000000000000000000000000001 '
1)
b00000000000000000000000000000011 *
b0000000000000001 ,
b0000000000000001 -
b0000000000000011 0
b0001 2
b0001 3
b0011 6
b001 7
18
19
1;
1?
1A
b1000000000000000 ="
b1000000000000000 >"
1@"
b1000 4#
b1000 5#
17#
1I#
1J#
1L#
#40000000
0"
b00000000000000000000000100010010 #
b00000000000000000000000100000001 $
b00000000000000000000000000010000 %
b00000000000000000000000100000001 &
b00000000000000000000000000010000 '
0)
b00000000000000000000000100010010 *
b0000000100000001 ,
b0000000000010000 -
b0000000100010010 0
b0000 3
b0010 6
09
0<
b0001 M
b0001 P
1S
1V
b0001 f
b0001 j
1l
1p
b0000000000000000 ="
b0000000000000000 >"
0@"
b0000 4#
b0000 5#
07#
0I#
0J#
0L#
#60000000
b00100000000000000000000100100001 #
b00010000000000000000000000010000 $
b00010000000000000000000100010000 %
b00010000000000000000000000010000 &
b00010000000000000000000100010000 '
b00100000000000000000000100100001 *
b0000000000010000 ,
b0000000100010000 -
b0000000100100001 0
b0000 2
b0001 6
b000 7
08
0;
1<
0?
0A
b0001 L
b0010 P
b001 Q
1R
1U
0V
1Y
1[
b0000 f
b0001 g
0l
1m
b0001000000000000 ="
b0001000000000000 >"
b0010000000000000 A"
b0001 4#
b0001 5#
b0010 8#
b001 9#
1:#
1;#
1=#
1A#
1C#
